package com.rm.business_lib.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.rm.business_lib.db.converter.ChapterListConverter;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORY_PLAY_BOOK".
*/
public class HistoryPlayBookDao extends AbstractDao<HistoryPlayBook, Long> {

    public static final String TABLENAME = "HISTORY_PLAY_BOOK";

    /**
     * Properties of entity HistoryPlayBook.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Audio_id = new Property(0, Long.class, "audio_id", true, "_id");
        public final static Property Audio_type = new Property(1, int.class, "audio_type", false, "AUDIO_TYPE");
        public final static Property Audio_name = new Property(2, String.class, "audio_name", false, "AUDIO_NAME");
        public final static Property Original_name = new Property(3, String.class, "original_name", false, "ORIGINAL_NAME");
        public final static Property Author = new Property(4, String.class, "author", false, "AUTHOR");
        public final static Property Author_intro = new Property(5, String.class, "author_intro", false, "AUTHOR_INTRO");
        public final static Property Anchor_id = new Property(6, String.class, "anchor_id", false, "ANCHOR_ID");
        public final static Property Short_intro = new Property(7, String.class, "short_intro", false, "SHORT_INTRO");
        public final static Property Audio_intro = new Property(8, String.class, "audio_intro", false, "AUDIO_INTRO");
        public final static Property Audio_cover = new Property(9, String.class, "audio_cover", false, "AUDIO_COVER");
        public final static Property Audio_label = new Property(10, String.class, "audio_label", false, "AUDIO_LABEL");
        public final static Property Quality = new Property(11, String.class, "quality", false, "QUALITY");
        public final static Property Progress = new Property(12, int.class, "progress", false, "PROGRESS");
        public final static Property Play_count = new Property(13, String.class, "play_count", false, "PLAY_COUNT");
        public final static Property Subscription_count = new Property(14, String.class, "subscription_count", false, "SUBSCRIPTION_COUNT");
        public final static Property Last_sequence = new Property(15, String.class, "last_sequence", false, "LAST_SEQUENCE");
        public final static Property Status = new Property(16, int.class, "status", false, "STATUS");
        public final static Property Created_at = new Property(17, String.class, "created_at", false, "CREATED_AT");
        public final static Property Chapter_updated_at = new Property(18, String.class, "chapter_updated_at", false, "CHAPTER_UPDATED_AT");
        public final static Property Audio_cover_url = new Property(19, String.class, "audio_cover_url", false, "AUDIO_COVER_URL");
        public final static Property ListBean = new Property(20, String.class, "listBean", false, "LIST_BEAN");
    }

    private final ChapterListConverter listBeanConverter = new ChapterListConverter();

    public HistoryPlayBookDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryPlayBookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY_PLAY_BOOK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: audio_id
                "\"AUDIO_TYPE\" INTEGER NOT NULL ," + // 1: audio_type
                "\"AUDIO_NAME\" TEXT," + // 2: audio_name
                "\"ORIGINAL_NAME\" TEXT," + // 3: original_name
                "\"AUTHOR\" TEXT," + // 4: author
                "\"AUTHOR_INTRO\" TEXT," + // 5: author_intro
                "\"ANCHOR_ID\" TEXT," + // 6: anchor_id
                "\"SHORT_INTRO\" TEXT," + // 7: short_intro
                "\"AUDIO_INTRO\" TEXT," + // 8: audio_intro
                "\"AUDIO_COVER\" TEXT," + // 9: audio_cover
                "\"AUDIO_LABEL\" TEXT," + // 10: audio_label
                "\"QUALITY\" TEXT," + // 11: quality
                "\"PROGRESS\" INTEGER NOT NULL ," + // 12: progress
                "\"PLAY_COUNT\" TEXT," + // 13: play_count
                "\"SUBSCRIPTION_COUNT\" TEXT," + // 14: subscription_count
                "\"LAST_SEQUENCE\" TEXT," + // 15: last_sequence
                "\"STATUS\" INTEGER NOT NULL ," + // 16: status
                "\"CREATED_AT\" TEXT," + // 17: created_at
                "\"CHAPTER_UPDATED_AT\" TEXT," + // 18: chapter_updated_at
                "\"AUDIO_COVER_URL\" TEXT," + // 19: audio_cover_url
                "\"LIST_BEAN\" TEXT);"); // 20: listBean
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY_PLAY_BOOK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HistoryPlayBook entity) {
        stmt.clearBindings();
 
        Long audio_id = entity.getAudio_id();
        if (audio_id != null) {
            stmt.bindLong(1, audio_id);
        }
        stmt.bindLong(2, entity.getAudio_type());
 
        String audio_name = entity.getAudio_name();
        if (audio_name != null) {
            stmt.bindString(3, audio_name);
        }
 
        String original_name = entity.getOriginal_name();
        if (original_name != null) {
            stmt.bindString(4, original_name);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(5, author);
        }
 
        String author_intro = entity.getAuthor_intro();
        if (author_intro != null) {
            stmt.bindString(6, author_intro);
        }
 
        String anchor_id = entity.getAnchor_id();
        if (anchor_id != null) {
            stmt.bindString(7, anchor_id);
        }
 
        String short_intro = entity.getShort_intro();
        if (short_intro != null) {
            stmt.bindString(8, short_intro);
        }
 
        String audio_intro = entity.getAudio_intro();
        if (audio_intro != null) {
            stmt.bindString(9, audio_intro);
        }
 
        String audio_cover = entity.getAudio_cover();
        if (audio_cover != null) {
            stmt.bindString(10, audio_cover);
        }
 
        String audio_label = entity.getAudio_label();
        if (audio_label != null) {
            stmt.bindString(11, audio_label);
        }
 
        String quality = entity.getQuality();
        if (quality != null) {
            stmt.bindString(12, quality);
        }
        stmt.bindLong(13, entity.getProgress());
 
        String play_count = entity.getPlay_count();
        if (play_count != null) {
            stmt.bindString(14, play_count);
        }
 
        String subscription_count = entity.getSubscription_count();
        if (subscription_count != null) {
            stmt.bindString(15, subscription_count);
        }
 
        String last_sequence = entity.getLast_sequence();
        if (last_sequence != null) {
            stmt.bindString(16, last_sequence);
        }
        stmt.bindLong(17, entity.getStatus());
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(18, created_at);
        }
 
        String chapter_updated_at = entity.getChapter_updated_at();
        if (chapter_updated_at != null) {
            stmt.bindString(19, chapter_updated_at);
        }
 
        String audio_cover_url = entity.getAudio_cover_url();
        if (audio_cover_url != null) {
            stmt.bindString(20, audio_cover_url);
        }
 
        List listBean = entity.getListBean();
        if (listBean != null) {
            stmt.bindString(21, listBeanConverter.convertToDatabaseValue(listBean));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HistoryPlayBook entity) {
        stmt.clearBindings();
 
        Long audio_id = entity.getAudio_id();
        if (audio_id != null) {
            stmt.bindLong(1, audio_id);
        }
        stmt.bindLong(2, entity.getAudio_type());
 
        String audio_name = entity.getAudio_name();
        if (audio_name != null) {
            stmt.bindString(3, audio_name);
        }
 
        String original_name = entity.getOriginal_name();
        if (original_name != null) {
            stmt.bindString(4, original_name);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(5, author);
        }
 
        String author_intro = entity.getAuthor_intro();
        if (author_intro != null) {
            stmt.bindString(6, author_intro);
        }
 
        String anchor_id = entity.getAnchor_id();
        if (anchor_id != null) {
            stmt.bindString(7, anchor_id);
        }
 
        String short_intro = entity.getShort_intro();
        if (short_intro != null) {
            stmt.bindString(8, short_intro);
        }
 
        String audio_intro = entity.getAudio_intro();
        if (audio_intro != null) {
            stmt.bindString(9, audio_intro);
        }
 
        String audio_cover = entity.getAudio_cover();
        if (audio_cover != null) {
            stmt.bindString(10, audio_cover);
        }
 
        String audio_label = entity.getAudio_label();
        if (audio_label != null) {
            stmt.bindString(11, audio_label);
        }
 
        String quality = entity.getQuality();
        if (quality != null) {
            stmt.bindString(12, quality);
        }
        stmt.bindLong(13, entity.getProgress());
 
        String play_count = entity.getPlay_count();
        if (play_count != null) {
            stmt.bindString(14, play_count);
        }
 
        String subscription_count = entity.getSubscription_count();
        if (subscription_count != null) {
            stmt.bindString(15, subscription_count);
        }
 
        String last_sequence = entity.getLast_sequence();
        if (last_sequence != null) {
            stmt.bindString(16, last_sequence);
        }
        stmt.bindLong(17, entity.getStatus());
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(18, created_at);
        }
 
        String chapter_updated_at = entity.getChapter_updated_at();
        if (chapter_updated_at != null) {
            stmt.bindString(19, chapter_updated_at);
        }
 
        String audio_cover_url = entity.getAudio_cover_url();
        if (audio_cover_url != null) {
            stmt.bindString(20, audio_cover_url);
        }
 
        List listBean = entity.getListBean();
        if (listBean != null) {
            stmt.bindString(21, listBeanConverter.convertToDatabaseValue(listBean));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HistoryPlayBook readEntity(Cursor cursor, int offset) {
        HistoryPlayBook entity = new HistoryPlayBook( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // audio_id
            cursor.getInt(offset + 1), // audio_type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // audio_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // original_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // author
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // author_intro
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // anchor_id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // short_intro
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // audio_intro
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // audio_cover
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // audio_label
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // quality
            cursor.getInt(offset + 12), // progress
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // play_count
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // subscription_count
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // last_sequence
            cursor.getInt(offset + 16), // status
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // created_at
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // chapter_updated_at
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // audio_cover_url
            cursor.isNull(offset + 20) ? null : listBeanConverter.convertToEntityProperty(cursor.getString(offset + 20)) // listBean
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HistoryPlayBook entity, int offset) {
        entity.setAudio_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAudio_type(cursor.getInt(offset + 1));
        entity.setAudio_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOriginal_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAuthor(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAuthor_intro(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAnchor_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setShort_intro(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAudio_intro(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAudio_cover(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAudio_label(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setQuality(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setProgress(cursor.getInt(offset + 12));
        entity.setPlay_count(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSubscription_count(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLast_sequence(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setStatus(cursor.getInt(offset + 16));
        entity.setCreated_at(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setChapter_updated_at(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setAudio_cover_url(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setListBean(cursor.isNull(offset + 20) ? null : listBeanConverter.convertToEntityProperty(cursor.getString(offset + 20)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HistoryPlayBook entity, long rowId) {
        entity.setAudio_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HistoryPlayBook entity) {
        if(entity != null) {
            return entity.getAudio_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HistoryPlayBook entity) {
        return entity.getAudio_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
